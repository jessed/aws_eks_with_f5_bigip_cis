# These steps are incorporated into the TF "k8s" module


# Create bigip-login secrets
kubectl create secret generic bigip-login -n kube-system --from-literal=username=admin --from-literal=password=<password>


# Create bigip service account
kubectl create serviceaccount bigip-ctlr -n kube-system


# RBAC configuration
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: bigip-ctlr-clusterrole
rules:
- apiGroups:  ["", "extensions", "networking.k8s.io"]
  resources:  ["nodes", "services", "endpoints", "namespaces", "ingresses", "pods", "ingressclasses"]
  verbs:      ["get", "list", "watch"]
- apiGroups:  ["", "extensions", "networking.k8s.io"]
  resources:  ["configmaps", "events", "ingresses/status", "services/status"]
  verbs:      ["get", "list", "watch", "update", "create", "patch"]
- apiGroups:  ["cis.f5.com"]
  resources:  ["virtualservers","virtualservers/status", "tlsprofiles", "transportservers", "ingresslinks", "externaldnss"]
  verbs:      ["get", "list", "watch", "update", "patch"]
- apiGroups:  ["fic.f5.com"]
  resources:  ["f5ipams", "f5ipams/status"]
  verbs:      ["get", "list", "watch", "update", "create", "patch", "delete"]
- apiGroups:  ["apiextensions.k8s.io"]
  resources:  ["customresourcedefinitions"]
  verbs:      ["get", "list", "watch", "update", "create", "patch"]
- apiGroups:  ["", "extensions"]
  resources:  ["secrets"]
  verbs:      ["get", "list", "watch"]



# Create k8s cluster role binding
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: bigip-ctlr-clusterrole-binding
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: bigip-ctlr-clusterrole
subjects:
- apiGroup: ""
  kind: ServiceAccount
  name: bigip-ctlr
  namespace: kube-system
