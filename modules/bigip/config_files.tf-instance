# Config files to be created from templates

# System Onboarding script
resource "local_file" "ltm_cloud_init" {
  count                           = var.bigip.count
  content = templatefile("${path.root}/templates/bigip_cloud_init.template", {
    cloud_init_log                = var.f5_common.cloud_init_log
    admin_user                    = var.f5_common.bigip_user
    admin_password                = var.f5_common.bigip_pass
    use_cloud_storage             = var.f5_common.use_cloud_storage
    use_cloud_config              = var.f5_common.use_cloud_config
    ltm_cloud_config              = var.f5_common.ltm_cloud_config
#    iam_role                      = var.iam.role_name
    s3_bucket                     = var.f5_common.s3_bucket
    aws_region                    = var.f5_common.region
    ACR                           = var.f5_common.ACR
    DO_FN                         = var.f5_common.DO_file
    TS_FN                         = var.f5_common.TS_file
    AS3_FN                        = var.f5_common.AS3_file
    CFG_DIR                       = var.f5_common.cfg_dir
    AS3_conf                      = filebase64("${path.root}/templates/empty_file")
    TS_conf                       = filebase64("${path.root}/templates/empty_file")
    LTM_Config                    = filebase64("${path.root}/templates/empty_file")
    DO_conf                       = base64encode(local_file.do_json[count.index].content)
#    AS3_conf                      = base64encode(local_file.as3_json[count.index].content)
#    TS_conf                       = base64encode(local_file.ts_json.content)
#    LTM_Config                    = base64encode(local_file.ltm_config[count.index].content)
  })
  filename                        = "${path.root}/work_tmp/bigip_cloud_init.bash"
}

# Declarative-Onboarding config
resource "local_file" "do_json" {
  count                           = var.bigip.count
  content = templatefile("${path.root}/templates/do.json", {
    local_host                    = format("${var.bigip.prefix}.%s", var.bigip.domain)
    local_selfip                  = element(aws_network_interface.data_plane[count.index].private_ip.*, 0)
    data_gateway                  = cidrhost(var.data_subnet.cidr_block, 1)
    ntp_server                    = var.bigip.ntp_server
    timezone                      = var.bigip.timezone
  })
  filename                        = "${path.root}/work_tmp/do.json"
}

/*
# LTM configuration
resource "local_file" "ltm_config" {
  count                           = var.bigip.count
  content = templatefile("${path.root}/templates/ltm_config.conf-template", {
    #self_ip                       = element(aws_network_interface.data_plane[count.index].private_ip.*, 0)
  })
  filename                        = "${path.root}/work_tmp/ltm_config.conf"
}
*/

/*
# update license script
resource "local_file" "update_license" {
  content = templatefile("${path.root}/templates/update_license.bash-template", {
    bigIQHost                     = var.f5_common.bigiq_host
    bigIQPort                     = var.f5_common.bigiq_port
    bigIQUser                     = var.f5_common.bigiq_user
    bigIQPass                     = var.f5_common.bigiq_pass
    bigIPUser                     = var.f5_common.bigip_user
    bigIPPass                     = var.f5_common.bigip_pass
    bigIQLicenseType              = var.f5_common.bigiq_lic_type
    bigIQLicensePool              = var.f5_common.bigiq_lic_pool
    bigIPAssignmentType           = var.f5_common.bigip_lic_assign_type
    bigIPTenant                   = var.f5_common.bigip_lic_tenant
    bigIPReachable                = var.f5_common.bigip_reachable
    bigIPHypervisor               = var.f5_common.bigip_lic_hypervisor
    bigIPLicenseOverwrite         = var.f5_common.bigip_lic_overwrite
    bigIQUnitOfMeasure            = var.f5_common.bigiq_lic_measure
  })
  filename                        = "${path.root}/work_tmp/f5_update_license.bash"
}


# AS3 configuration
resource "local_file" "as3_json" {
  count   = var.bigip.count
  content = templatefile("${path.root}/templates/as3.json", {
    REMARK                        = "Service discovery"
    APP                           = "aws"
    PARTITION                     = "aws"
    ASGGROUP                      = var.bigip.asg_name
    VS_NAME                       = local.aws.bigip.vs_name
    VS_ADDR                       = aws_network_interface.data_plane[count.index].private_ip
    POOL                          = "pool"
    MONITOR                       = "tcp"
    REGION                        = var.region
    IAMROLEARN                    = aws_iam_role.bigip_iam_role.arn
    IAMEXTERNALID                 = local.aws.external_id
  })
  filename                        = "${path.root}/work_tmp/as3${count.index}.json"
}
*/

